$ go version
go version go1.18.1 darwin/amd64


$ go help gopath
The Go path is used to resolve import statements.
It is implemented by and documented in the go/build package.
Go 路径用于解析导入语句。
它由 go/build 包实现并记录在其中。

The GOPATH environment variable lists places to look for Go code.
On Unix, the value is a colon-separated string.
On Windows, the value is a semicolon-separated string.
On Plan 9, the value is a list.
GOPATH 环境变量列出了寻找 Go 代码的位置。
在 Unix 上，该值是一个以冒号分隔的字符串。
在 Windows 上，该值是一个以分号分隔的字符串。
在 Plan 9 上，该值是一个列表。

If the environment variable is unset, GOPATH defaults
to a subdirectory named "go" in the user's home directory
($HOME/go on Unix, %USERPROFILE%\go on Windows),
unless that directory holds a Go distribution.
Run "go env GOPATH" to see the current GOPATH.
如果未设置环境变量，则 GOPATH 默认
到用户主目录中名为“go”的子目录
($HOME/go on Unix, %USERPROFILE%\go on Windows),
除非该目录包含 Go 发行版。
运行“go env GOPATH”以查看当前的 GOPATH。

See https://golang.org/wiki/SettingGOPATH to set a custom GOPATH.

Each directory listed in GOPATH must have a prescribed structure:
GOPATH 中列出的每个目录必须具有规定的结构：

The src directory holds source code. The path below src
determines the import path or executable name.
src 目录包含源代码。 src 下面的路径
确定导入路径或可执行文件名称。

The pkg directory holds installed package objects.
As in the Go tree, each target operating system and
architecture pair has its own subdirectory of pkg
(pkg/GOOS_GOARCH).
pkg 目录包含已安装的包对象。
与 Go 树一样，每个目标操作系统和
架构对有自己的 pkg 子目录
(pkg/GOOS_GOARCH)。

If DIR is a directory listed in the GOPATH, a package with
source in DIR/src/foo/bar can be imported as "foo/bar" and
has its compiled form installed to "DIR/pkg/GOOS_GOARCH/foo/bar.a".
如果 DIR 是 GOPATH 中列出的目录，则包含
DIR/src/foo/bar 中的源可以导入为“foo/bar”和
已将其编译后的形式安装到“DIR/pkg/GOOS_GOARCH/foo/bar.a”。

The bin directory holds compiled commands.
Each command is named for its source directory, but only
the final element, not the entire path. That is, the
command with source in DIR/src/foo/quux is installed into
DIR/bin/quux, not DIR/bin/foo/quux. The "foo/" prefix is stripped
so that you can add DIR/bin to your PATH to get at the
installed commands. If the GOBIN environment variable is
set, commands are installed to the directory it names instead
of DIR/bin. GOBIN must be an absolute path.
bin 目录包含已编译的命令。
每个命令都以其源目录命名，但仅
最后一个元素，而不是整个路径。 那就是
源代码在 DIR/src/foo/quux 中的命令安装到
DIR/bin/quux，而不是 DIR/bin/foo/quux。 “foo/”前缀被去除
这样您就可以将 DIR/bin 添加到您的 PATH 以获取
安装的命令。 如果 GOBIN 环境变量是
设置，命令安装到它命名的目录中
DIR / bin。 GOBIN 必须是绝对路径。

Here's an example directory layout:

    GOPATH=/home/user/go

    /home/user/go/
        src/
            foo/
                bar/               (go code in package bar)
                    x.go
                quux/              (go code in package main)
                    y.go
        bin/
            quux                   (installed command)
        pkg/
            linux_amd64/
                foo/
                    bar.a          (installed package object)

Go searches each directory listed in GOPATH to find source code,
but new packages are always downloaded into the first directory
in the list.
Go 搜索 GOPATH 中列出的每个目录以查找源代码，
但新包总是下载到第一个目录
在列表中。

See https://golang.org/doc/code.html for an example.

GOPATH and Modules

When using modules, GOPATH is no longer used for resolving imports.
However, it is still used to store downloaded source code (in GOPATH/pkg/mod)
and compiled commands (in GOPATH/bin).
使用模块时，GOPATH 不再用于解析导入。
但是，它仍然用于存储下载的源代码（在 GOPATH/pkg/mod 中）
和编译命令（在 GOPATH/bin 中）。

Internal Directories

Code in or below a directory named "internal" is importable only
by code in the directory tree rooted at the parent of "internal".
Here's an extended version of the directory layout above:
名为“internal”的目录中或下面的代码只能导入
通过以“内部”的父级为根的目录树中的代码。
这是上面目录布局的扩展版本：

    /home/user/go/
        src/
            crash/
                bang/              (go code in package bang)
                    b.go
            foo/                   (go code in package foo)
                f.go
                bar/               (go code in package bar)
                    x.go
                internal/
                    baz/           (go code in package baz)
                        z.go
                quux/              (go code in package main)
                    y.go


The code in z.go is imported as "foo/internal/baz", but that
import statement can only appear in source files in the subtree
rooted at foo. The source files foo/f.go, foo/bar/x.go, and
foo/quux/y.go can all import "foo/internal/baz", but the source file
crash/bang/b.go cannot.

See https://golang.org/s/go14internal for details.

Vendor Directories

Go 1.6 includes support for using local copies of external dependencies
to satisfy imports of those dependencies, often referred to as vendoring.
Go 1.6 包括对使用外部依赖项的本地副本的支持
以满足这些依赖项的导入，通常称为供应商。

Code below a directory named "vendor" is importable only
by code in the directory tree rooted at the parent of "vendor",
and only using an import path that omits the prefix up to and
including the vendor element.
名为“供应商”的目录下的代码仅可导入
通过以“供应商”的父级为根的目录树中的代码，
并且只使用省略前缀的导入路径
包括供应商元素。

Here's the example from the previous section,
but with the "internal" directory renamed to "vendor"
and a new foo/vendor/crash/bang directory added:
这是上一节中的示例，
但将“内部”目录重命名为“供应商”
并添加了一个新的 foo/vendor/crash/bang 目录：

    /home/user/go/
        src/
            crash/
                bang/              (go code in package bang)
                    b.go
            foo/                   (go code in package foo)
                f.go
                bar/               (go code in package bar)
                    x.go
                vendor/
                    crash/
                        bang/      (go code in package bang)
                            b.go
                    baz/           (go code in package baz)
                        z.go
                quux/              (go code in package main)
                    y.go

The same visibility rules apply as for internal, but the code
in z.go is imported as "baz", not as "foo/vendor/baz".

Code in vendor directories deeper in the source tree shadows
code in higher directories. Within the subtree rooted at foo, an import
of "crash/bang" resolves to "foo/vendor/crash/bang", not the
top-level "crash/bang".

Code in vendor directories is not subject to import path
checking (see 'go help importpath').

When 'go get' checks out or updates a git repository, it now also
updates submodules.

Vendor directories do not affect the placement of new repositories
being checked out for the first time by 'go get': those are always
placed in the main GOPATH, never in a vendor subtree.

See https://golang.org/s/go15vendor for details.

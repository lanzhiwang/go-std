$ go version
go version go1.18.1 darwin/amd64


$ go help cache
The go command caches build outputs for reuse in future builds.
The default location for cache data is a subdirectory named go-build
in the standard user cache directory for the current operating system.
Setting the GOCACHE environment variable overrides this default,
and running 'go env GOCACHE' prints the current cache directory.
go 命令缓存构建输出以便在未来的构建中重用。
缓存数据的默认位置是名为 go-build 的子目录
在当前操作系统的标准用户缓存目录中。
设置 GOCACHE 环境变量会覆盖此默认值，
并运行“go env GOCACHE”打印当前缓存目录。

The go command periodically deletes cached data that has not been
used recently. Running 'go clean -cache' deletes all cached data.
go命令周期性的删除缓存中没有被删除的数据
最近用过。 运行“go clean -cache”会删除所有缓存数据。

The build cache correctly accounts for changes to Go source files,
compilers, compiler options, and so on: cleaning the cache explicitly
should not be necessary in typical use. However, the build cache
does not detect changes to C libraries imported with cgo.
If you have made changes to the C libraries on your system, you
will need to clean the cache explicitly or else use the -a build flag
(see 'go help build') to force rebuilding of packages that
depend on the updated C libraries.
构建缓存正确地说明了对 Go 源文件的更改，
编译器、编译器选项等：显式清理缓存
在典型使用中不应该是必要的。 但是，构建缓存
不检测对使用 cgo 导入的 C 库的更改。
如果您对系统上的 C 库进行了更改，您
将需要显式清理缓存或使用 -a 构建标志
（参见“go help build”）强制重建包
取决于更新的 C 库。

The go command also caches successful package test results.
See 'go help test' for details. Running 'go clean -testcache' removes
all cached test results (but not cached build results).
go 命令还会缓存成功的包测试结果。
有关详细信息，请参阅“帮助测试”。 运行 'go clean -testcache' 删除
所有缓存的测试结果（但不是缓存的构建结果）。

The go command also caches values used in fuzzing with 'go test -fuzz',
specifically, values that expanded code coverage when passed to a
fuzz function. These values are not used for regular building and
testing, but they're stored in a subdirectory of the build cache.
Running 'go clean -fuzzcache' removes all cached fuzzing values.
This may make fuzzing less effective, temporarily.
go 命令还缓存了使用“go test -fuzz”进行模糊测试的值，
具体来说，当传递给
模糊功能。 这些值不用于常规建筑和
测试，但它们存储在构建缓存的子目录中。
运行“go clean -fuzzcache”会删除所有缓存的模糊测试值。
这可能会暂时降低模糊测试的效率。

The GODEBUG environment variable can enable printing of debugging
information about the state of the cache:

GODEBUG=gocacheverify=1 causes the go command to bypass the
use of any cache entries and instead rebuild everything and check
that the results match existing cache entries.

GODEBUG=gocachehash=1 causes the go command to print the inputs
for all of the content hashes it uses to construct cache lookup keys.
The output is voluminous but can be useful for debugging the cache.

GODEBUG=gocachetest=1 causes the go command to print details of its
decisions about whether to reuse a cached test result.
GODEBUG 环境变量可以启用调试打印
有关缓存状态的信息：

GODEBUG=gocacheverify=1 导致 go 命令绕过
使用任何缓存条目，而是重建所有内容并检查
结果匹配现有的缓存条目。

GODEBUG=gocachehash=1 导致 go 命令打印输入
对于它用于构造缓存查找键的所有内容哈希。
输出内容很多，但对调试缓存很有用。

GODEBUG=gocachetest=1 导致 go 命令打印其详细信息
关于是否重用缓存的测试结果的决定。

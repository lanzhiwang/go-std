参考：
1、https://www.cnblogs.com/concurrency/p/go.html


$ go version
go version go1.18.1 darwin/amd64


$ go help buildconstraint
A build constraint, also known as a build tag, is a line comment that begins
构建约束，也称为构建标记，是开始于

	//go:build

that lists the conditions under which a file should be included in the package.
Constraints may appear in any kind of source file (not just Go), but
they must appear near the top of the file, preceded
only by blank lines and other line comments. These rules mean that in Go
files a build constraint must appear before the package clause.
列出文件应包含在包中的条件。
约束可能出现在任何类型的源文件中（不仅仅是 Go），但是
它们必须出现在文件顶部附近，位于
仅由空白行和其他行注释。 这些规则意味着在 Go 中
文件构建约束必须出现在 package 子句之前。

To distinguish build constraints from package documentation,
a build constraint should be followed by a blank line.
为了区分构建约束和包文档，
构建约束后应跟一个空行。

A build constraint is evaluated as an expression containing options
combined by ||, &&, and ! operators and parentheses. Operators have
the same meaning as in Go.
构建约束被评估为包含选项的表达式
由 ||、&& 和 ! 组合而成 运算符和括号。 经营者有
与 Go 中的含义相同。

For example, the following build constraint constrains a file to
build when the "linux" and "386" constraints are satisfied, or when
"darwin" is satisfied and "cgo" is not:

	//go:build (linux && 386) || (darwin && !cgo)

It is an error for a file to have more than one //go:build line.
一个文件有多个 //go:build 行是错误的。

During a particular build, the following words are satisfied:

	- the target operating system, as spelled by runtime.GOOS, set with the
	  GOOS environment variable.
	- the target architecture, as spelled by runtime.GOARCH, set with the
	  GOARCH environment variable.
	- the compiler being used, either "gc" or "gccgo"
	- "cgo", if the cgo command is supported (see CGO_ENABLED in
	  'go help environment').
	- a term for each Go major release, through the current version:
	  "go1.1" from Go version 1.1 onward, "go1.12" from Go 1.12, and so on.
	- any additional tags given by the -tags flag (see 'go help build').
在特定构建期间，满足以下条件：

- 目标操作系统，由 runtime.GOOS 拼写，设置为 GOOS 环境变量。
- 目标体系结构，由 runtime.GOARCH 拼写，设置为 GOARCH 环境变量。
- 正在使用的编译器，“gc”或“gccgo”
- “cgo”，如果支持 cgo 命令（请参阅中的 CGO_ENABLED '去帮助环境'）。
- 每个 Go 主要版本的术语，通过当前版本：“go1.1”从 Go 1.1 版本开始，“go1.12”从 Go 1.12 开始，等等。
- 由 -tags 标志给出的任何附加标签（参见“go help build”）。

There are no separate build tags for beta or minor releases.
测试版或次要版本没有单独的构建标签。

If a file's name, after stripping the extension and a possible _test suffix,
matches any of the following patterns:
	*_GOOS
	*_GOARCH
	*_GOOS_GOARCH
(example: source_windows_amd64.go) where GOOS and GOARCH represent
any known operating system and architecture values respectively, then
the file is considered to have an implicit build constraint requiring
those terms (in addition to any explicit constraints in the file).
如果是文件名，在去掉扩展名和可能的 _test 后缀后，
匹配以下任何模式：
*_GOOS
*_GOARCH
*_GOOS_GOARCH
（示例：source_windows_amd64.go）其中 GOOS 和 GOARCH 代表
任何已知的操作系统和体系结构值，然后
该文件被认为具有隐式构建约束，需要
这些条款（除了文件中的任何明确约束）。

Using GOOS=android matches build tags and files as for GOOS=linux
in addition to android tags and files.
使用 GOOS=android 与 GOOS=linux 一样匹配构建标签和文件
除了android标签和文件。

Using GOOS=illumos matches build tags and files as for GOOS=solaris
in addition to illumos tags and files.

Using GOOS=ios matches build tags and files as for GOOS=darwin
in addition to ios tags and files.

To keep a file from being considered for the build:

	//go:build ignore

(any other unsatisfied word will work as well, but "ignore" is conventional.)

To build a file only when using cgo, and only on Linux and OS X:

	//go:build cgo && (linux || darwin)

Such a file is usually paired with another file implementing the
default functionality for other systems, which in this case would
carry the constraint:

	//go:build !(cgo && (linux || darwin))

Naming a file dns_windows.go will cause it to be included only when
building the package for Windows; similarly, math_386.s will be included
only when building the package for 32-bit x86.

Go versions 1.16 and earlier used a different syntax for build constraints,
with a "// +build" prefix. The gofmt command will add an equivalent //go:build
constraint when encountering the older syntax.
